name: Release

on:
  push:
    branches:
      - main
  pull_request:
    types: [opened, synchronize, reopened, labeled]
    branches:
      - main
  workflow_dispatch:

jobs:
  validate:
    name: Validate Changes
    runs-on: ubuntu-latest
    steps:
      - name: Checkout Repo
        uses: actions/checkout@v3
        with:
          fetch-depth: 0

      - name: Setup Node.js
        uses: actions/setup-node@v3
        with:
          node-version: 18.x

      - name: Setup pnpm
        uses: pnpm/action-setup@v2
        with:
          version: 8
          run_install: false

      - name: Get pnpm store directory
        shell: bash
        run: |
          echo "STORE_PATH=$(pnpm store path --silent)" >> $GITHUB_ENV

      - name: Setup pnpm cache
        uses: actions/cache@v3
        with:
          path: ${{ env.STORE_PATH }}
          key: ${{ runner.os }}-pnpm-store-${{ hashFiles('**/pnpm-lock.yaml') }}
          restore-keys: |
            ${{ runner.os }}-pnpm-store-

      - name: Install Dependencies
        run: pnpm install --frozen-lockfile

      - name: Type Check
        run: pnpm run type-check

      - name: Run Tests
        run: pnpm run test

      - name: Lint
        run: pnpm run lint

  release:
    name: Release
    needs: validate
    if: |
      github.event_name == 'push' && 
      github.ref == 'refs/heads/main' && 
      (contains(github.event.head_commit.message, 'Merge pull request') || github.event_name == 'workflow_dispatch')
    runs-on: ubuntu-latest
    steps:
      - name: Checkout Repo
        uses: actions/checkout@v3
        with:
          fetch-depth: 0
          token: ${{ secrets.CUSTOM_GITHUB_TOKEN }}

      - name: Setup Node.js
        uses: actions/setup-node@v3
        with:
          node-version: 20.x
          registry-url: "https://registry.npmjs.org"

      - name: Setup pnpm
        uses: pnpm/action-setup@v2
        with:
          version: 9
          run_install: false

      - name: Get pnpm store directory
        shell: bash
        run: |
          echo "STORE_PATH=$(pnpm store path --silent)" >> $GITHUB_ENV

      - name: Setup pnpm cache
        uses: actions/cache@v3
        with:
          path: ${{ env.STORE_PATH }}
          key: ${{ runner.os }}-pnpm-store-${{ hashFiles('**/pnpm-lock.yaml') }}
          restore-keys: |
            ${{ runner.os }}-pnpm-store-

      - name: Install Dependencies
        run: pnpm install --frozen-lockfile

      # Get PR number from merge commit message
      - name: Get PR Details
        id: pr_details
        run: |
          PR_NUMBER=$(git log -1 --pretty=%B | grep -o '#[0-9]\+' | grep -o '[0-9]\+' || echo '')
          if [ -z "$PR_NUMBER" ]; then
            echo "No PR number found in commit message"
            exit 0
          fi
          echo "pr_number=$PR_NUMBER" >> $GITHUB_OUTPUT

      # Get PR labels
      - name: Get PR Labels
        id: pr_labels
        if: steps.pr_details.outputs.pr_number != ''
        run: |
          LABELS=$(gh pr view ${{ steps.pr_details.outputs.pr_number }} --json labels -q '.labels[].name' 2>/dev/null || echo '')
          if [ -z "$LABELS" ]; then
            echo "No labels found"
            exit 0
          fi
          echo "labels=$LABELS" >> $GITHUB_OUTPUT
        env:
          GITHUB_TOKEN: ${{ secrets.CUSTOM_GITHUB_TOKEN }}

      # Determine release type from labels
      - name: Set Release Type
        id: release_type
        if: steps.pr_labels.outputs.labels != ''
        run: |
          LABELS="${{ steps.pr_labels.outputs.labels }}"
          if echo "$LABELS" | grep -q "release:preview"; then
            echo "type=preview" >> $GITHUB_OUTPUT
            echo "tag=preview" >> $GITHUB_OUTPUT
            echo "npm_tag=preview" >> $GITHUB_OUTPUT
          elif echo "$LABELS" | grep -q "release:alpha"; then
            echo "type=alpha" >> $GITHUB_OUTPUT
            echo "tag=alpha" >> $GITHUB_OUTPUT
            echo "npm_tag=alpha" >> $GITHUB_OUTPUT
          elif echo "$LABELS" | grep -q "release:beta"; then
            echo "type=beta" >> $GITHUB_OUTPUT
            echo "tag=beta" >> $GITHUB_OUTPUT
            echo "npm_tag=beta" >> $GITHUB_OUTPUT
          elif echo "$LABELS" | grep -q "release:stable"; then
            echo "type=stable" >> $GITHUB_OUTPUT
            echo "tag=latest" >> $GITHUB_OUTPUT
            echo "npm_tag=latest" >> $GITHUB_OUTPUT
          else
            echo "No release label found"
            exit 0
          fi

      # Build packages before publishing
      - name: Build Packages
        run: pnpm run build

      # Create Release PR or Publish
      - name: Create Release Pull Request or Publish
        if: steps.release_type.outputs.type != ''
        id: changesets
        uses: changesets/action@v1
        with:
          publish: pnpm run release
          commit: "chore: version packages"
          title: "chore: version packages"
          createGithubReleases: true
        env:
          GITHUB_TOKEN: ${{ secrets.CUSTOM_GITHUB_TOKEN }}
          NPM_TOKEN: ${{ secrets.NPM_TOKEN }}
          NPM_CONFIG_PROVENANCE: true

      # Create GitHub Releases for each changed package
      - name: Create GitHub Releases
        if: steps.changesets.outputs.published == 'true'
        run: |
          # Function to create release for a package
          create_release() {
            local PKG_PATH=$1
            local PKG_JSON="${PKG_PATH}/package.json"
            
            local PKG_NAME=$(node -p "require('./${PKG_JSON}').name")
            local PKG_VERSION=$(node -p "require('./${PKG_JSON}').version")
            local RELEASE_TAG="${{ steps.release_type.outputs.tag }}"
            
            # Add pre-release flag for non-stable releases
            local PRERELEASE=""
            if [ "$RELEASE_TAG" != "latest" ]; then
              PRERELEASE="--prerelease"
            fi
            
            echo "Creating release for ${PKG_NAME}@${PKG_VERSION}"
            
            # Create the release
            if ! gh release create "${PKG_NAME}@v${PKG_VERSION}-${RELEASE_TAG}" \
              --title "${PKG_NAME}@v${PKG_VERSION}-${RELEASE_TAG}" \
              --notes "See CHANGELOG.md for details" \
              $PRERELEASE; then
              echo "Failed to create release for ${PKG_NAME}"
              return 1
            fi
          }

          # Process each package
          echo "Looking for changed packages..."
          for pkg in packages/*/; do
            if [ -f "${pkg}package.json" ]; then
              echo "Processing ${pkg}..."
              if ! create_release "$pkg"; then
                echo "Failed to process ${pkg}"
                exit 1
              fi
            fi
          done
        env:
          GITHUB_TOKEN: ${{ secrets.CUSTOM_GITHUB_TOKEN }}
