name: Release

on:
  pull_request:
    types: [closed]
    branches:
      - main

env:
  NODE_VERSION: 20
  PNPM_VERSION: 9

# Concurrency group to ensure only one release workflow runs at a time
concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

jobs:
  release:
    name: Release
    # Only run if PR was merged and has a release label
    if: |
      github.event.pull_request.merged == true &&
      (contains(github.event.pull_request.labels.*.name, 'release:preview') ||
       contains(github.event.pull_request.labels.*.name, 'release:alpha') ||
       contains(github.event.pull_request.labels.*.name, 'release:beta') ||
       contains(github.event.pull_request.labels.*.name, 'release:stable'))
    runs-on: ubuntu-latest
    permissions:
      contents: write
      pull-requests: write
      id-token: write # Needed for NPM provenance

    steps:
      - name: Checkout Repo
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          ref: main # Explicitly checkout main since we're triggered on PR
          token: ${{ secrets.CUSTOM_GITHUB_TOKEN }}

      - name: Setup pnpm
        uses: pnpm/action-setup@v3
        with:
          version: ${{ env.PNPM_VERSION }}

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          registry-url: "https://registry.npmjs.org"
          cache: "pnpm"

      - name: Install Dependencies
        run: pnpm install --frozen-lockfile

      - name: Run Tests
        run: pnpm run test

      - name: Lint and Format
        run: pnpm run check

      - name: Set Release Type
        id: release_type
        run: |
          LABELS="${{ toJSON(github.event.pull_request.labels.*.name) }}"
          if [[ $LABELS =~ release:(preview|alpha|beta|stable) ]]; then
            RELEASE_TYPE=$(echo $LABELS | grep -o 'release:\(preview\|alpha\|beta\|stable\)' | head -n1 | cut -d: -f2)
            echo "Found release type: $RELEASE_TYPE"
            
            case $RELEASE_TYPE in
              preview|alpha|beta)
                echo "type=$RELEASE_TYPE" >> $GITHUB_OUTPUT
                echo "tag=$RELEASE_TYPE" >> $GITHUB_OUTPUT
                echo "npm_tag=$RELEASE_TYPE" >> $GITHUB_OUTPUT
                ;;
              stable)
                echo "type=stable" >> $GITHUB_OUTPUT
                echo "tag=latest" >> $GITHUB_OUTPUT
                echo "npm_tag=latest" >> $GITHUB_OUTPUT
                ;;
              *)
                echo "Invalid release type: $RELEASE_TYPE"
                exit 1
                ;;
            esac
          else
            echo "No valid release label found"
            exit 1
          fi

      - name: Build Packages
        run: |
          if ! pnpm run build; then
            echo "Build failed"
            exit 1
          fi

      - name: Create Release Pull Request or Publish
        id: changesets
        uses: changesets/action@v1
        with:
          publish: pnpm run release
          commit: "chore: version packages"
          title: "chore: version packages"
          createGithubReleases: true
        env:
          GITHUB_TOKEN: ${{ secrets.CUSTOM_GITHUB_TOKEN }}
          NPM_TOKEN: ${{ secrets.NPM_TOKEN }}
          NPM_CONFIG_PROVENANCE: true
          NODE_ENV: production

      - name: Create GitHub Releases
        if: steps.changesets.outputs.published == 'true'
        run: |
          create_release() {
            local PKG_PATH=$1
            local PKG_JSON="${PKG_PATH}/package.json"
            
            # Verify package.json exists
            if [[ ! -f "$PKG_JSON" ]]; then
              echo "Error: package.json not found at $PKG_JSON"
              return 1
            }
            
            # Extract package details with error checking
            local PKG_NAME PKG_VERSION
            PKG_NAME=$(node -p "require('./${PKG_JSON}').name" 2>/dev/null)
            PKG_VERSION=$(node -p "require('./${PKG_JSON}').version" 2>/dev/null)
            
            if [[ -z "$PKG_NAME" || -z "$PKG_VERSION" ]]; then
              echo "Error: Failed to extract package name or version from $PKG_JSON"
              return 1
            }
            
            local RELEASE_TAG="${{ steps.release_type.outputs.tag }}"
            local RELEASE_NAME="${PKG_NAME}@v${PKG_VERSION}"
            [[ "$RELEASE_TAG" != "latest" ]] && RELEASE_NAME="${RELEASE_NAME}-${RELEASE_TAG}"
            
            local PRERELEASE=""
            [[ "$RELEASE_TAG" != "latest" ]] && PRERELEASE="--prerelease"
            
            echo "Creating release: $RELEASE_NAME"
            
            # Attempt to create release with retry logic
            local max_attempts=3
            local attempt=1
            while (( attempt <= max_attempts )); do
              if gh release create "$RELEASE_NAME" \
                --title "$RELEASE_NAME" \
                --notes "See CHANGELOG.md for details" \
                $PRERELEASE; then
                return 0
              fi
              
              echo "Attempt $attempt failed. Retrying in 5 seconds..."
              sleep 5
              ((attempt++))
            done
            
            echo "Failed to create release after $max_attempts attempts"
            return 1
          }

          # Process each package
          echo "Looking for changed packages..."
          FAILED_PACKAGES=()

          for pkg in packages/*/; do
            if [[ -f "${pkg}package.json" ]]; then
              echo "Processing ${pkg}..."
              if ! create_release "$pkg"; then
                FAILED_PACKAGES+=("$pkg")
              fi
            fi
          done

          if (( ${#FAILED_PACKAGES[@]} > 0 )); then
            echo "Failed to create releases for the following packages:"
            printf '%s\n' "${FAILED_PACKAGES[@]}"
            exit 1
          fi
        env:
          GITHUB_TOKEN: ${{ secrets.CUSTOM_GITHUB_TOKEN }}

      - name: Handle Failure
        if: failure()
        run: |
          echo "::error::Release workflow failed. Please check the logs for details."
          # Could add additional failure handling here, like notifications
